#ifndef UWB_API_H
#define UWB_API_H

#include "deca_regs.h"
#include "dwm_utils.h"

struct UWB_message
{
    uint8_t ctrl;
    uint8_t src;
    uint8_t dest;
    uint8_t code;
    uint8_t data[20];
    uint8_t data_len;
};

typedef struct UWB_message UWB_message;

enum message_code {
    POLL_MSG,
    RESP_MSG,
    FINAL_MSG,
    FINAL_MSG_OPT,
    OPT_MSG
};

enum _config_error
{
    E_SUCCESS = 0,
    E_RX_TO = -1,
    E_RX_ERROR = -2,
    E_INV_RESP = -3,
    E_INV_MODE = -4,
    E_TX_ERROR = -4
};

typedef enum _config_error error_t;

enum states {
    RECEIVE,
    TRANSMIT,
    IDLE
};

/**
 * Initialize the API
 * 
 * This function initialized the UWB API and prepares it for ranging. It must be called before any other function of this API is used.
 * @param node_id The node to initialize
 **/
void uwb_api_init(uint8_t node_id);

uint8_t uwb_send_frame_with_rx(uint8_t* tx_msg, uint8_t msg_size, uint32_t tx_delay, uint8_t* rx_buf, uint8_t* rx_buf_len);
uint8_t uwb_send_frame(uint8_t* tx_msg, uint8_t msg_size, uint8_t ranging, uint32_t tx_delay);
float uwb_range_with_node(uint8_t target_id, uint8_t opt_msg_en, uint8_t* node_pos);
void uwb_check_for_errors(int8_t value);
void uwb_set_state(uint8_t value);
UWB_message decode_uwb_message(uint8_t* rx_buffer, uint8_t len);

#endif 
